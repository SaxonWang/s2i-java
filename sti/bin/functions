#!/bin/bash
# common shell routines for s2i scripts

function get_pom_property() {
  prop=$1
  echo $(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=${prop} |grep -Ev '(^\[|Download\w+:)' | awk '{print $NF}')
}

# insert settings for HTTP proxy into settings.xml if supplied
function configure_proxy() {
  echo "[INFO] Configure proxy ..."
  if [ -n "$HTTP_PROXY_HOST" -a -n "$HTTP_PROXY_PORT" ]; then
    xml="<proxy>\
         <id>genproxy</id>\
         <active>true</active>\
         <protocol>http</protocol>\
         <host>$HTTP_PROXY_HOST</host>\
         <port>$HTTP_PROXY_PORT</port>"
    if [ -n "$HTTP_PROXY_USERNAME" -a -n "$HTTP_PROXY_PASSWORD" ]; then
      xml="$xml\
         <username>$HTTP_PROXY_USERNAME</username>\
         <password>$HTTP_PROXY_PASSWORD</password>"
    fi
    if [ -n "$HTTP_PROXY_NONPROXYHOSTS" ]; then
      xml="$xml\
         <nonProxyHosts>$HTTP_PROXY_NONPROXYHOSTS</nonProxyHosts>"
    fi
  xml="$xml\
       </proxy>"
    sed -i "s|<!-- ### configured http proxy ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}

# insert settings for mirrors/repository managers into settings.xml if supplied
function configure_mirrors() {
  if [ -n "$MAVEN_MIRROR_URL" ]; then
    echo "[INFO] Configure mirrors"
    xml="    <mirror>\
      <id>mirror.default</id>\
      <url>$MAVEN_MIRROR_URL</url>\
      <mirrorOf>external:*</mirrorOf>\
    </mirror>"
    sed -i "s|<!-- ### configured mirrors ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}


# function copy_artifacts() {
#   echo "[INFO] Copy artifacts ..."

#   dir=$1
#   types=
#   shift
#   while [ $# -gt 0 ]; do
#     types="$types;$1"
#     shift
#   done

#   for d in $(echo $dir | tr "," "\n")
#   do
#     shift
#     for t in $(echo $types | tr ";" "\n")
#     do
#       ls $LOCAL_SOURCE_DIR/$d
#       ls $DEPLOY_DIR
#       echo "[INFO] Copying all $t artifacts from $LOCAL_SOURCE_DIR/$d directory into $DEPLOY_DIR for later deployment..."
#       cp -rfv $LOCAL_SOURCE_DIR/$d/*.$t $DEPLOY_DIR 2> /dev/null
#     done
#   done
# }

function copy_artifacts() {
  echo "[INFO] Copy artifacts ..."
  target_dir=$1
  deploy_dir=$2
  aid=$3
  ver=$4
  if [ -f ${target_dir}/app.jar ]; then
    cp -rfv ${target_dir}/app.jar ${deploy_dir}/app.jar
  elif [ -f ${target_dir}/${aid}-${ver}.jar ]; then
    cp -rfv ${target_dir}/${aid}-${ver}.jar ${deploy_dir}/app.jar
  elif [ -f ${target_dir}/${aid}.jar ]; then
    cp -rfv ${target_dir}/${aid}.jar ${deploy_dir}/app.jar
  elif [ -f ${target_dir}/${aid}-${ver}.war ]; then
    cp -rfv ${target_dir}/${aid}-${ver}.war ${deploy_dir}/ROOT.war
  elif [ -f ${target_dir}/${aid}.war ]; then
    cp -rfv ${target_dir}/${aid}.war ${deploy_dir}/ROOT.war 
  fi
}

# handle incremental builds. If we have been passed build artifacts, untar
# them over the supplied source.
function manage_incremental_build() {
  if [ -d /tmp/artifacts ]; then
      echo "[INFO] Expanding artifacts from incremental build..."
      ( cd /tmp/artifacts && tar cf - . ) | ( cd ${HOME} && tar xvf - )
      rm -rf /tmp/artifacts
  fi
}

# s2i 'save-artifacts' routine
function s2i_save_build_artifacts() {
  echo "[INFO] Save build artifacts"
  cd ${HOME}
  tar cf - .m2
}

# optionally clear the local maven repository after the build
function clear_maven_repository() {
    mcr=$(echo "${MAVEN_CLEAR_REPO}" | tr [:upper:] [:lower:])
    if [ "${mcr}" = "true" ]; then
      echo "[INFO] clean maven repository"
      rm -rf ${HOME}/.m2/repository/*
    fi
}

#clear local source
function clear_source() {
  echo "[INFO] DELETE ${HOME}/source"
    rm -rf ${HOME}/source
  echo "[INFO] DELETE /tmp/src"
  rm -rf /tmp/src/
  mkdir -p /tmp/src  
}